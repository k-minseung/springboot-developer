객체 지향 설계 5대 원칙 - SOLID
1.단일 책임 원칙 (SRP, Single Responsibility Principle)
- 하나의 매서드는 하나의 책임만 가져야 한다.

2.개방 폐쇄 원칙(OCP, Open-CLose Principle)
- 상속에는 Open, 변경에는 Close 해야한다
- 코드를 변경 할 일이 있으면 변경하지 말고, 웬만하면 상속을 통해서 변경해라

3. 리스코프 치환 원칙(LSP, Liskov Subtitution Principle)
- 같은 조상의 다른 클래스로 바꿔도 동작해야 한다.

Spring Data JPA
-> Hibernate 를 다른 구현체로 바꿔도 문제가 생기지 않는다

lsf4J
-> Logback, Log4j 같이 다른 구현체로 바꿔도 문제가 생기지 않는다.

4. 인터페이스 분리 원칙(ISPm Interface Segregation Principle)
- 유사한 인터페이스가 있더라도 목적이 다르면 분리 해야한다.

5. 의존관계 역전 원칙(DIP,Dependency Inversion Principle)
- 추상화에 의존한 코드를 작성해야 한다.
- 코드가 너무 구체적이면 변경에 불리하다.

create todo 구현
-> todo 아이템을 데이터베이스에 추가하는 기능

영속레이어 > 서비스레이어 > 표현레이어  순으로 구현


update todo 구현

영속계층
TodoRepository
save(), findByUserId();

서비스 계층
TodoService에 update() 메서드를 작성


DeleteTodo 기능 구현하기
- Todo를 삭제하기 위한 기능

영속계층
TodoRepository의 delete(), findByUserId() 메서드를 사용할 것

서비스 계층
delete() 메서드 만들기

표현계층
delete() 메서드 